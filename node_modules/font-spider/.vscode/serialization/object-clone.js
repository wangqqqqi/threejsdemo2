'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var clone = function clone(target) {
  var result = Array.isArray(target) ? [] : {};
  var cache = new WeakMap();
  var root = 'root';
  var contexts = [[target, root, result]];

  while (contexts.length) {
    var _contexts$shift = contexts.shift(),
        _contexts$shift2 = _slicedToArray(_contexts$shift, 3),
        value = _contexts$shift2[0],
        key = _contexts$shift2[1],
        context = _contexts$shift2[2];

    var object = value;
    if (value !== null && typeof value === 'object') {
      if (cache.has(value)) {
        object = cache.get(value);
      } else {
        switch (Object.getPrototypeOf(value).constructor.name) {
          case 'Map':
          case 'WeakMap':
            object = new value.constructor();
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = value.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var index = _step.value;

                contexts.unshift([value.get(index), index, object]);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }

            break;
          case 'Set':
          case 'WeakSet':
            object = new value.constructor();
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = value.values()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var item = _step2.value;

                contexts.unshift([item, item, object]);
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            break;
          case 'Array':
            object = [];
            for (var _index = 0, len = value.length; _index < len; _index += 1) {
              contexts.unshift([value[_index], _index, object]);
            }
            break;
          default:
            object = {};
            for (var _index2 in value) {
              if (Object.prototype.hasOwnProperty.call(value, _index2)) {
                contexts.unshift([value[_index2], _index2, object]);
              }
            }
        }
        cache.set(value, object);
      }
    }
    if (context instanceof Map || context instanceof WeakMap) {
      context.set(key, object);
    } else if (context instanceof Set || context instanceof WeakSet) {
      context.add(object);
    } else {
      context[key] = object;
    }
  }
  return result[root];
};

exports.default = clone;