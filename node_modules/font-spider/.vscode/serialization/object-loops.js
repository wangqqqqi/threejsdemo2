'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var loops = {};
loops.for = function (target, callback) {
  var contexts = [[target, null, null]];
  while (contexts.length) {
    var _contexts$shift = contexts.shift(),
        _contexts$shift2 = _slicedToArray(_contexts$shift, 3),
        value = _contexts$shift2[0],
        key = _contexts$shift2[1],
        context = _contexts$shift2[2];

    var result = callback.call(context, value, key, context);
    if (result === loops.continue) {
      continue; // eslint-disable-line no-continue
    }
    if (result === loops.break) {
      break;
    }
    if (result !== null && typeof result === 'object') {
      if (Array.isArray(result)) {
        for (var i = 0, len = result.length; i < len; i += 1) {
          contexts.push([result[i], i, result]);
        }
      } else {
        for (var _i in result) {
          if (Object.prototype.hasOwnProperty.call(result, _i)) {
            contexts.push([result[_i], _i, result]);
          }
        }
      }
    }
  }
};

loops.break = Symbol('loops.break');
loops.continue = Symbol('loops.continue');

exports.default = loops;